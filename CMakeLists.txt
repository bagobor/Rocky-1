CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(Rocky)

MESSAGE("Don't forget to get the lastest source code from http://github.com/wolftein/rocky")

## Set the version of the client ##
SET(ROCKY_VERSION_MAJOR "0")
SET(ROCKY_VERSION_MINOR "1")
SET(ROCKY_VERSION_PATCH "0")
SET(ROCKY_VERSION "${ROCKY_VERSION_MAJOR}.${ROCKY_VERSION_MINOR}.${ROCKY_VERSION_PATCH}")

## Set some client parameters (Todo) ##

## Set the build type of the client ##
#SET(CMAKE_BUILD_TYPE Debug)
SET(CMAKE_BUILD_TYPE Release)

MESSAGE("Building Rocky ${CMAKE_BUILD_TYPE} ${ROCKY_VERSION} ...")

## Add C++ Definition
ADD_DEFINITIONS(-std=c++0x -Wall -Wextra -DOGRE_STATIC_LIB) #Enable C++0x mode
SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -fopenmp)
SET(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} -fopenmp)

## Set the output folder
IF(UNIX)
	SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/unix")
ELSEIF(WIN32)
	SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/windows")
ELSEIF(APPLE)
	SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/apple")
ENDIF(UNIX)

MESSAGE("Output directory >> ${EXECUTABLE_OUTPUT_PATH}")
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/CMakeFinds")

MESSAGE("${CMAKE_MODULE_PATH}")

# Try to find Boost
FIND_PACKAGE(Boost REQUIRED)
IF (NOT Boost_FOUND)
	MESSAGE(FATAL_ERROR "Download and install Boost from www.boost.org")
ENDIF()
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${Boost_LIBRARIES})


# Try to find Ogre3D
FIND_PACKAGE(OGRE REQUIRED)
IF (NOT OGRE_FOUND)
	MESSAGE(FATAL_ERROR "Download and install Ogre3D from www.ogre3d.org")
ENDIF()
INCLUDE_DIRECTORIES(${OGRE_INCLUDE_DIRS})
SET(LIBS ${LIBS} ${OGRE_LIBRARIES})

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/includes")

ADD_SUBDIRECTORY(src)